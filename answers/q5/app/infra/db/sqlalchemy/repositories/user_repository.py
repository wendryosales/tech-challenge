from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.domain.entities.user import UserEntity
from app.domain.repositories.user_repository import UserRepositoryPort
from app.infra.db.sqlalchemy.models.role import RoleModel
from app.infra.db.sqlalchemy.models.user import UserModel
from app.infra.db.sqlalchemy.mappers.user_mapper import UserMapper


class SqlAlchemyUserRepository(UserRepositoryPort):
    def __init__(self, session: AsyncSession) -> None:
        self.session = session

    async def get_by_email(self, email: str) -> UserEntity | None:
        result = await self.session.execute(select(UserModel).where(UserModel.email == email))
        row = result.scalar_one_or_none()
        if not row:
            return None
        return UserMapper.to_domain(row)

    async def role_exists(self, role_id: int) -> bool:
        result = await self.session.execute(select(RoleModel.id).where(RoleModel.id == role_id))
        return result.scalar_one_or_none() is not None

    async def create(self, user: UserEntity) -> UserEntity:
        # id is generated by the database; map the entity to the ORM model
        user_row = UserMapper.to_persistence(user)
        self.session.add(user_row)
        await self.session.flush()
        await self.session.refresh(user_row)
        await self.session.commit()
        return UserMapper.to_domain(user_row)
